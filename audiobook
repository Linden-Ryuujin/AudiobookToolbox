#!/bin/bash

function PrintHelp {
    echo "audiobooks ACTION [ACTION PARAMETERS]"
    echo
    echo Actions:
    echo "  -t, --trim              [audiobook.m4b] [Length]        Trim the [audiobook.m4b] to [Length] (HH:MM:SS.000). This will copy to a new file as some meta data will be lost."
    echo "  -s, --skip              [audiobook.m4b] [NewStart]      Set the [audiobook.m4b] to start at [NewStart] (HH:MM:SS.000). This will copy to a new file as some meta data will be lost."
    echo "  -m, --merge             [-r, --recursive]               Merge all files in this folder into a single file with the same name as the folder. If [--recursive] arg is passed will instead run on all folders under the current one."

    echo "  -c, --chapters                                          Process audiobook chapters - use 'audiobooks -c -h' for details."
}

function Trim {
    audiobook="$1"
    length="$2"

    backupFile=$(sed "s/\.\([^.]\+\)$/.bck.\1/" <<< "$audiobook")

    echo "Trimming file: \"$audiobook\""
    mv "$audiobook" "$backupFile"


    if [ ${audiobook: -4} == ".m4b" ]; then
        ffmpeg -i "$backupFile" -vn -acodec copy -t $length -f mp4 "$audiobook"
    else
        ffmpeg -i "$backupFile" -vn -acodec copy -t $length "$audiobook"
    fi
}

function Skip {
    audiobook="$1"
    start="$2"

    backupFile=$(sed "s/\.\([^.]\+\)$/.bck.\1/" <<< "$audiobook")

    echo "Skipping start of file: \"$audiobook\""
    mv "$audiobook" "$backupFile"

    if [ ${audiobook: -4} == ".m4b" ]; then
        ffmpeg -i "$backupFile" -vn -acodec copy -ss $start -f mp4 "$audiobook"
    else
        ffmpeg -i "$backupFile" -vn -acodec copy -ss $start "$audiobook"
    fi
}

function MergeFolder {
    pushd "$1" > /dev/null

    outputFile=$(pwd | sed 's|.*/\(.*\)|\1|').m4b
    outputFileTemp=$(sed "s/\.m4b$/_temp/" <<< "$outputFile")
    outputFileTempFolder="$outputFileTemp-tmpfiles"

    if [ $(find . -maxdepth 1 -type f -name "*.mp3" | wc -l) != 0 ]; then
       outputFileTemp="$outputFileTemp.mp3"
    elif [ $(find . -maxdepth 1 -type f -name "*.aac" | wc -l) != 0 ]; then
        outputFileTemp="$outputFileTemp.aac"
    elif [ $(find . -maxdepth 1 -type f -name "*.m4a" | wc -l) != 0 ]; then
        outputFileTemp="$outputFileTemp.m4a"
    elif [ $(find . -maxdepth 1 -type f -name "*.flac" | wc -l) != 0 ]; then
        outputFileTemp="$outputFileTemp.flac"
    elif [ $(find . -maxdepth 1 -type f -name "*.m4b" | wc -l) != 0 ]; then
        outputFileTemp="$outputFileTemp.m4b"
    else
        echo "No audio files found in: \"$(pwd)\""
        return 0
    fi

    echo "Merging files to audiobook: \"$outputFile\""

    #first get a unified audio file
    m4b-tool merge ./. --output-file "$outputFileTemp" --no-conversion --jobs=2 -vvv

    if [ $(find . -maxdepth 1 -type f -name "*.mp3" | wc -l) != 0 ]; then
        echo "Fixing any MP3 errors"
       mp3val "$outputFileTemp" -f -nb
    fi

    #next convert to m4b
    echo "Wrap as m4b"
    ffmpeg -i "$outputFileTemp" -vn -acodec copy -f mp4 "$outputFile"
    rm "$outputFileTemp"
    rm -rf "$outputFileTempFolder"

    popd
}

export -f MergeFolder

function Merge
{
    case "$1" in
        -r|--recursive) find . -mindepth 1 -type d -exec bash -c 'MergeFolder "$0"' {} \; ;;
        "") MergeFolder "$(pwd)" ;;
        *) echo "Unknown action: '$1'"
    esac
}

function SplitChannels
{
    audiobook="$2"

    if [[ -z "$audiobook" ]]; then
        audiobook=$(\ls *.m4b| head -1)
    fi

    echo "Splitting audio channels from file: \"$audiobook\""

    ffmpeg -i "$audiobook" -filter_complex "[0:a]channelsplit=channel_layout=stereo[left][right]" -map "[left]" left.m4a -map "[right]" right.m4a
}

folder=$(dirname "$0")

case "$1" in
    -t|--trim) shift; Trim "$@" ;;
    -s|--skip) shift; Skip "$@" ;;
    --splitChannels) shift; SplitChannels "$@" ;;
    -m|--merge) shift; Merge "$@" ;;
    -c| --chapters) shift; "$folder/chapters" "$@" ;;
    -h|--help) PrintHelp ;;
    *) echo "Unknown action: '$1'"
esac