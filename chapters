#!/bin/bash

function PrintHelp {
    echo "chapters ACTION [ACTION PARAMETERS]"
    echo
    echo Actions:
    echo "  -a, --add               [chapters.txt] [audiobook.m4b]  Add the chapters in [chapters.txt] to the audiobook in quicktime format."
    echo "  -d, --dump              [audiobook.m4b]                 Dump the chapters from the audiobook to [audiobook.chapters.txt]"
    echo ""
    echo "  -ac, --audacity-clean   [labels.txt]                    Remove unedited Audacity labels (ones with a \"S\" Title) and align start and end points."
    echo "  -ad, --audacity-dump    [labels.txt]                    Covert Audacity labels into quicktime format."
}

function AskToDelete {
    file=$1

    if [[ -f $file ]]; then
        read -p "File $file exists. Do you want to delete? [y/n] " delete
        if [[ $delete == [yY] ]]; then
            rm "$file" && echo "File deleted"
        else
            return 1
        fi
    fi

    return 0
}

function Add {
    chaptersFile="$1"
    audiobook="$2"

    if [[ -z "$chaptersFile" ]]; then
        chaptersFile=$(\ls *.txt| head -1)
    fi

    if [[ -z "$audiobook" ]]; then
        audiobook=$(\ls *.m4b| head -1)
    fi


    echo "Importing chapters from file: $chaptersFile"
    mp4chaps --remove "$audiobook"

    #import chapters in nero format
    MP4Box -chap "$chaptersFile" "$audiobook"

    #convert to quicktime format
    mp4chaps --convert --chapter-qt "$audiobook"
}

function Dump {
    audiobook="$1"

    if [[ -z "$audiobook" ]]; then
        audiobook=$(\ls *.m4b| head -1)
    fi

    echo "Dumping chapters from audiobook: \"$audiobook\""
    mp4chaps --export "$audiobook"
}

function AudacityCleanLabels {
    labelsFile="$1"
    cleanedFile=$(sed "s/\([^\.]*\)$/cleaned.\1/" <<< "$labelsFile")

    echo "Cleaning Audacity labels in from: \"$labelsFile\" to \"$cleanedFile\"..."

    if ! AskToDelete "$cleanedFile"; then
        echo "Aborting clean"
        return 1
    fi

    nextStartTime=0
    while read startTime endTime title; do

        if [ $nextStartTime == 0 ]; then
            nextStartTime=$endTime
        fi

        if [[ "$(echo "$title" | tr -d '\n\r')" != "S" ]]; then
            echo "$startTime	$nextStartTime	$title"
            nextStartTime=$startTime
        fi

    done <<< "$(tac "$labelsFile")" > "$cleanedFile"

    echo "$(tac "$cleanedFile")" > "$cleanedFile"

    echo "Cleaning complete"
}

function AudacityDumpLabels {
    labelsFile="$1"
    chaptersFile=$(sed "s/\([^\.]*\)$/chapters.\1/" <<< "$labelsFile")

    echo "Extracting chapters from Audacity labels in: \"$labelsFile\" to \"$chaptersFile\"..."

    if ! AskToDelete "$chaptersFile"; then
        echo "Aborting extraction"
        return 1
    fi


    while read startTime endTime title; do
        chapterTime=$(date -d@$startTime -u +%H:%M:%S.%3N)
        echo "$chapterTime $title"
    done < "$labelsFile" > "$chaptersFile"

     echo "Extraction complete"
}

function AddAudacityLabels {
    labelsFile="$1"

    if [[ -z "$labelsFile" ]]; then
        labelsFile=$(\ls *.txt| head -1)
    fi

    cleanedFile=$(sed "s/\([^\.]*\)$/cleaned.\1/" <<< "$labelsFile")
    chaptersFile=$(sed "s/\([^\.]*\)$/chapters.\1/" <<< "$cleanedFile")


    AudacityCleanLabels "$labelsFile"
    AudacityDumpLabels "$cleanedFile"
    Add "$chaptersFile"
}

function Fetch {
    asin=$1
    region=$2

    if [[ -z "$search" ]]; then
        asin=$(FindAsin)
    fi

    if [[ -z "$region" ]]; then
        region=uk
    fi

    url=https://api.audnex.us/books/$asin/chapters?region=$region

    echo Fetch: $url
    result=$(curl $url)

    chapters=$(grep -Po '"chapters":.*?"\}\],' <<< $result)

    echo ""
    echo "Writing chapters to chapters.txt:"

    rm chapters.txt
    grep -Po '\{.*?\}' <<< $chapters | while read -r line ; do
        startTime=$(sed -nr 's/.*"startOffsetMs":([^,]*?)([^,][^,][^,]).*/\1.\2/p' <<< $line)
        title=$(sed -nr 's/.*"title":"(.*)"}.*/\1/p' <<< $line)

        if [[ -z "$startTime" ]]; then
            startTime="0.000"
        fi

        chapterTime=$(date -d@$startTime -u +%H:%M:%S.%3N)

        echo $chapterTime $title >> chapters.txt
    done

    cat chapters.txt
}

function FindAsin {
    search=$1

    if [[ -z "$search" ]]; then
        audiobook=$(\ls *.m4b| head -1)

        probe=$(ffprobe "$audiobook" 2>&1)
        authorLine=$(grep -w -m 1 'artist' <<< $probe)
        author=$(sed -nr 's/.*:[ ]*(.)/\1/p' <<< $authorLine)

        titleLine=$(grep -w -m 1 'album' <<< $probe)
        title=$(sed -nr 's/.*:[ ]*(.)/\1/p' <<< $titleLine)

        search="$author $title"
    fi
    search=$(sed 's/ /%20/g' <<< $search)

    url="https://www.audible.com/search?ipRedirectOverride=true&overrideBaseCountry=true&keywords=$search"

    result=$(curl "$url" 2>/dev/null)

    asinLine=$(grep -Po -m 1 'data-asin=".*"' <<< $result)
    asin=$(sed -nr 's/.*data-asin="([^"]*)".*/\1/p' <<< $asinLine)

    echo $asin
}

case "$1" in
    -a|--add) shift; Add "$@" ;;
    -d|--dump) shift; Dump "$@" ;;
    -f|--fetch) shift; Fetch "$@" ;;
    --asin)  shift; FindAsin "$@" ;;
    -ac|--audacity-clean) shift; AudacityCleanLabels "$@";;
    -ad|--audacity-dump) shift; AudacityDumpLabels "$@";;
    -aa|--audacity-add) shift; AddAudacityLabels "$@";;
    -h|--help) PrintHelp ;;
    *) echo "Unknown action: '$1'"
esac